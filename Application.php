<?php

/**
 * This is the primary dispatcher for all of the PhrameWork architecture
 */

namespace PhrameWork;

class Application extends PhrameWork {

    /**
     * Default content type and character set
     */
    protected $content_type = "text/html";
    protected $charset = "utf-8";

    /**
     * The directory where your models, views and layouts are stored
     */
    protected $app_dir;

    /**
     * Holds the array of routes
     */
    protected $routes;

    /**
     * This is the chosen controller object
     */
    protected $controller;

    /**
     * Holds the data generated by the model(s) to be passed to the view(s)
     */
    protected $data;

    /**
     * If true, commands on the request URI are handled
     */
    protected $allow_commands = false;

    /**
     * Holds the command provided on the URL for administrative use
     */
    protected $command;

    /**
     * When true the global space is cleared before models and views are run
     */
    protected $paranoid = false;

    /**
     * These hold the input data that is accessed via the getter
     */
    protected $GET;
    protected $POST;
    protected $COOKIE;
    protected $HEADERS;

    /**
     * Constructor
     *
     * @param array $config Overrides for the classes properties
     */
    public function __construct($config) {

        parent::__construct($config);

        if(empty($this->app_dir) || !file_exists($this->app_dir) || !is_dir($this->app_dir)){
            trigger_error("Application directory is required. $config[app_dir] is not valid.", E_USER_ERROR);
        }

    }

    /**
     * Magic setter for select properties
     *
     * @param string $var   Variable name
     * @param mixed  $value New value for the variable
     */
    public function __set($var, $value) {
        switch($var){
            case "content_type":
            case "charset":
                $this->$var = (string)$value;
                break;
            default:
                trigger_error("Unable to set $var", E_USER_ERROR);
        }
    }

    /**
     * Magic getter for select properties
     *
     * @param  string $var Variable name
     *
     * @return mixed
     */
    public function __get($var) {
        switch($var){
            case "path":
                return $this->route;
                break;
            case "GET":
                return $this->GET;
                break;
            case "POST":
                return $this->POST;
                break;
            case "COOKIE":
                return $this->COOKIE;
                break;
            case "HEADERS":
                return $this->HEADERS;
                break;
            default:
                trigger_error("Unknown variable $var", E_USER_ERROR);
        }
    }

    /**
     * Primary execution method. Dispatches the request through phases
     *
     * @return void
     */
    public function run() {

        if(empty($this->routes) || !is_array($this->routes)){
            trigger_error("Defined paths required.", E_USER_ERROR);
            return;
        }

        $this->match_route();

        $this->parse_inputs();

        if($this->paranoid){
            $this->clean_global_space();
        }

        $this->call_models();
        $this->call_views();
    }

    /**
     * Matches the request to the correct route
     *
     * @return void
     */
    protected function match_route() {

        $request_path = parse_url($_SERVER["REQUEST_URI"], PHP_URL_PATH);

        if($this->allow_commands && preg_match('!/cmd=([^/]+)/!', $request_path, $match)){
            $request_path = str_replace($match[0], "/", $request_path);
            $this->command = $match[1];
        }

        foreach($this->routes as $key => $route){

            if(!empty($route["regex"])){
                $match = preg_match($route["regex"], $request_path);
            } elseif(!empty($route["match"])) {
                $match = $route["match"] == $request_path;
            } else {
                trigger_error("Path #$key has no matching criteria defined.", E_USER_WARNING);
            }

            if($match){

                $this->controller = new $route["controller"]($this);

                if(strpos(basename($request_path), ".") === false && substr($request_path, -1) != "/"){
                    trigger_error("It is best practices to end paths with no file extension with a /.", E_USER_NOTICE);
                }
                break;
            }

        }

        if(empty($this->controller)){
            trigger_error("No path discovered for $request_path.", E_USER_ERROR);
        }

        if($this->command == "debug_route"){
            $debug = new Debug();
            $debug->route($this);
        }

    }

    /**
     * Parses the input data based on the routes configuration
     *
     * @return void
     */
    protected function parse_inputs() {

        if(!empty($this->controller->inputs)){

            foreach($this->controller->inputs as $type => $filters){

                $data = array();

                if(is_string($type)){

                    switch($type) {
                        case "HEADERS":

                            if(function_exists("apache_request_headers")){
                                $headers = apache_request_headers();

                                $data = filter_var_array($headers, $filters);
                            }

                            break;
                    }

                } elseif($type == INPUT_GET || $type == INPUT_POST || $type == INPUT_COOKIE){

                    $data = filter_input_array($type, $filters);

                    foreach($filters as $var => $filter){
                        if(!isset($data[$var]) && isset($filter["default"])){
                            $data[$var] = $filter["default"];
                        }
                    }

                }

                switch($type){
                    case "HEADERS":
                        $this->HEADERS = $data;
                        break;
                    case INPUT_GET:
                        $this->GET = $data;
                        break;
                    case INPUT_POST:
                        $this->POST = $data;
                        break;
                    case INPUT_COOKIE:
                        $this->COOKIE = $data;
                        break;
                    default:
                        trigger_error("Invalid input type defined.", E_USER_WARNING);
                }

            }

        }

    }

    /**
     * Calls the model classes
     *
     * @return void
     */
    protected function call_models() {

        if(!empty($this->controller->models)){

            foreach($this->controller->models as $model){

                list($class, $function) = $model;

                $obj = new $class($this);

                $obj->$function($this->data);

                unset($obj);
            }
        }
    }


    /**
     * Calls the view classes
     *
     * @return void
     */
    protected function call_views() {

        header("Content-Type: $this->content_type; charset=$this->charset");


        if(!empty($this->controller->views)){

            foreach($this->controller->views as $view){

                list($class, $function) = $view;

                $obj = new $class($this);

                $obj->$function($this->data);

                unset($obj);
            }
        }
    }

    /**
     * When paranoid is set to true, this function used used to clean up the
     * global space
     *
     * @return void
     */
    protected function clean_global_space() {

        foreach($GLOBALS as $key => $value){
            global $$key;
            $$key = null;
        }

        $GLOBALS = null;
    }

    /**
     * Adds data to be used by views. Throws a notice when overwriting data.
     *
     * @param string $key  The key for the data
     * @param mixed  $data The data to store with they key
     */
    public function add_data($key, $data){
        if(isset($this->data[$key])){
            trigger_error("Data for key $key is already set.", E_USER_NOTICE);
        }
        $this->data[$key] = $data;
    }

    /**
     * Auto loader that I am 95% sure is PSR-0 compliant
     *
     * @param  string $class class name to load
     *
     * @return bool
     */
    public function load($class){

        $class = ltrim($class, "\\");
        $class = preg_replace("!^".__NAMESPACE__."\\\!", "", $class);
        $class = str_replace('\\', DIRECTORY_SEPARATOR, $class);
        $class = str_replace('_', DIRECTORY_SEPARATOR, $class);

        $paths = array(
            __DIR__."/$class.php",
            $this->app_dir."/$class.php"
        );

        foreach($paths as $path){
            if (is_file($path)) {
                include_once $path;
                return true;
            }
        }

        return false;

    }

}

?>
